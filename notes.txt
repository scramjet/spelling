On Mac Pro with 

Java (200 runs, min):    0.047
Python:                  0.097
Python:                  0.913 (with startup)
Haskell (bytestrings):   1.559
Haskell:                 1.567 (with startup)

Python code: 

t = timeit.Timer ('correct_words (["becuase", "korrekt", "teh", "helo"])', "from __main__ import correct_words")
min (t.repeat (10 , 1))

time python -m timeit  -r 3 -n 1 -s "from spelling import correct_words"  'correct_words (["becuase", "korrekt", "teh", "helo"])'

----------------------------------------------------------------------

Before opt (6676):

$ time ./spelling teh
the

real	0m13.788s
user	0m13.399s
sys	0m0.373s

After opt (ecf14):

$ time ./spelling teh
the

real	0m3.522s
user	0m3.309s
sys	0m0.212s

---

$ time python spelling.py
the

real	0m0.819s
user	0m0.702s
sys	0m0.114s

On Macbook

$ time ./spelling becuase
becuase -> because

real	0m4.990s
user	0m4.220s
sys	0m0.292s
[matt@pearl:~/Development/haskell] 
$ time ./spelling becuase
becuase -> because

real	0m5.107s
user	0m4.242s
sys	0m0.306s

after switch to strict left fold and insertWith' on train:

$ time ./spelling becuase
becuase -> because

real	0m4.580s
user	0m3.888s
sys	0m0.310s

converted to using lists instead of sets for words: worse:

$ time ./spelling becuase
becuase -> because

real	0m5.643s
user	0m4.764s
sys	0m0.304s

---

Java (0f14295). nanoseconds (10e-9 seconds)

min = 244,000, max = 83,019,000, avg = 1,083,645, median = 465,000
